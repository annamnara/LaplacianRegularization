# include "LabelPropagation.hpp"
# include "StringUtilities.hpp"
# include <sstream> 
# include<iostream>
# include <fstream>
# include <string>
# include <cstring>
# include <vector>
# include <stdlib.h>
# include <algorithm>
# include <iterator>
# include <cstdlib>
# include <cmath>
# include <iterator>
#include <ctime>  
# include <queue>
using namespace std;
StringUtilities su;
LabelPropagation::LabelPropagation()
{

}


void LabelPropagation::LoadWeightMatrix()

{
fstream myweightfile(&weightFile[0]);

WeightMatrix = new double* [noExamples];
for(int i = 0; i < noExamples; ++i) {
    WeightMatrix[i] = new double[noExamples];
}
string str;
double dummy=0.0;
int nr=0;
while(getline(myweightfile,str)){
   double  *p;
   p= su.SplitString(str,dummy); 
   for ( int i = 0; i < noExamples; i++ ) {
        WeightMatrix[nr][i]=*(p+i);
   }
  nr++;
  delete p;

}
}

void	LabelPropagation::TransitionMatrixCal(){


TransitionMatrix = new double* [noExamples];
for(int i = 0; i < noExamples; ++i) {
    TransitionMatrix[i] = new double[noExamples];
}


double rowSum=0.0;
for (int r=0; r<noExamples; r++){
   for (int c=0; c<noExamples;c++) {
     rowSum=rowSum+WeightMatrix[r][c];
}
   for(int l=0;l<noExamples;l++) 
   TransitionMatrix[r][l]=WeightMatrix[r][l] / rowSum;
  rowSum=0.0;

}
}

void	LabelPropagation::DiagonalMatrixCal(){


DiagonalMatrix= new double* [noExamples];
for(int i = 0; i < noExamples; ++i) {
    DiagonalMatrix[i] = new double[noExamples];
}


double rowSum=0.0;
for (int r=0; r<noExamples; r++){
   for (int c=0; c<noExamples;c++) {
     rowSum=rowSum+WeightMatrix[r][c];
}
   DiagonalMatrix[r][r]= rowSum;
  rowSum=0.0;

}
}

void	LabelPropagation::NormLaplacianMatrixCal(){


NormLaplacianMatrix= new double* [noExamples];
for(int i = 0; i < noExamples; ++i) {
    NormLaplacianMatrix[i] = new double[noExamples];
}


for (int r=0; r<noExamples; r++){
   for (int c=0; c<noExamples;c++) {


NormLaplacianMatrix[r][c]=DiagonalMatrix[r][c]-WeightMatrix[r][c];

}

}
}


void LabelPropagation::DisplayWeightMatrix()
{


cout<< "Displaying WeightMatrix"<< endl;

for(int i=0;i<noExamples;i++){

    for (int j=0;j<noExamples;j++){

          cout<< WeightMatrix[i][j]<<"\t";



 }
cout<< "\n";

}

}

void LabelPropagation::DisplayTransitionMatrix()
{


cout<< "Displaying TransitionMatrix"<< endl;

for(int i=0;i<noExamples;i++){

    for (int j=0;j<noExamples;j++){

          cout<< TransitionMatrix[i][j]<<"\t";



 }
cout<< "\n";

}

}

void LabelPropagation::DisplayNormLaplacianMatrix()
{


cout<< "Displaying NormLaplacianMatrix"<< endl;

for(int i=0;i<noExamples;i++){

    for (int j=0;j<noExamples;j++){

          cout<< NormLaplacianMatrix[i][j]<<"\t";



 }
cout<< "\n";

}

}

void LabelPropagation::PrepareYMatrix()
{

IndexMatrix=new int[noExamples];
OrgYMatrix = new double* [noExamples];
IpYMatrix = new double* [noExamples];
ActYMatrix = new double* [noExamples];
Y0Matrix = new double* [noExamples];


for(int i = 0; i < noExamples; ++i) {
   OrgYMatrix[i] = new double[noClasses];
   IpYMatrix[i] = new double[noClasses];
   ActYMatrix[i] = new double[noClasses];
   Y0Matrix[i] = new double[noClasses];
}

for (int i=0;i<noExamples;i++){
for (int j=0;j<noClasses;j++){
OrgYMatrix[i][j]=0.0;
}
}

fstream mylabelfile(&labelFile[0]);

string str;
int r=0;
while(getline(mylabelfile,str)){

char *x=&str[0];
OrgYMatrix[r][atoi(x)]=1;
IpYMatrix[r][atoi(x)]=1;
Y0Matrix[r][atoi(x)]=1;
IndexMatrix[r]=r;
r++;

}



int  *sharr;
sharr=su.ShuffleArray(IndexMatrix ,noExamples);
int lbpts=floor((lbr*noExamples)/100);
for(int i=lbpts;i<noExamples;i++){
    IpYMatrix[IndexMatrix[i]]=0;
    Y0Matrix[IndexMatrix[i]]=0;
}

}

/*void LabelPropagation::LPAlgorithm(){

int lbpts=floor((lbr*noExamples)/100);

for (int i=0;i<noIterations;i++)

{
      cout<< "\n Iter"<<i<<"\t"<<lbpts<<endl;
      MatrixProductComputation();
      ClampInitialLabels();
}

}

void LabelPropagation::LPAlgorithm3(){

int lbpts=floor((lbr*noExamples)/100);

for (int i=0;i<noIterations;i++)

{
      cout<< "\n I have entered the Iter"<<i<<"\t"<<lbpts<<endl;
    // MatrixProductComputation3();
     //ClampInitialLabels3();
}

}

void    LabelPropagation::MatrixProductComputation3(){

double rsum=0.0;
for(int r=0;r<noExamples;r++)
{
      for (int c=0;c<noExamples;c++){
            
           rsum=rsum+(alPha)*NormLaplacianMatrix[r][c]*IpYMatrix[c] + (1.0-alPha)*Y0Matrix[c];
     }
    ActYMatrix[r]=rsum;
    cout<<"r sum val"<< rsum<< endl;
    rsum=0.0;
}



}
void    LabelPropagation::MatrixProductComputation(){

double rsum=0.0;
for(int r=0;r<noExamples;r++)
{
      for (int c=0;c<noExamples;c++){
            
           rsum=rsum+TransitionMatrix[r][c]*IpYMatrix[c];
     }
    ActYMatrix[r]=rsum;
   // cout<<"r sum val"<< rsum<< endl;
    rsum=0.0;
}


cout<< " \n DISPLAYING  Current  Y values"<<endl;

for(int r=0;r<noExamples;r++)
{


cout<<r<< "\t"<<OrgYMatrix[r]<<"\t"<< Y0Matrix[r]<<"\t"<< ActYMatrix[r]<<endl; 


}



}



void    LabelPropagation::ClampInitialLabels(){
 
int lbpts=floor((lbr*noExamples)/100);
for(int i=0;i<noExamples;i++){


IpYMatrix[i]=ActYMatrix[i];


}
for (int i=0;i<lbpts;i++)
   IpYMatrix[IndexMatrix[i]]=OrgYMatrix[IndexMatrix[i]];

}

void    LabelPropagation::ClampInitialLabels3(){
 
int lbpts=floor((lbr*noExamples)/100);
for(int i=0;i<noExamples;i++){
IpYMatrix[i]=ActYMatrix[i];
}

}





void    LabelPropagation::DisplayActYMatrix(){
 
for (int i=0;i<noExamples;i++)
  cout<< ActYMatrix[i]<<endl;

}

*/
void LabelPropagation::DisplayOrgYMatrix()
{

cout<< "DISPLAYING Y MATRIX"<< endl;
for (int i=0; i<noExamples;i++)
 for (int j=0; j<noClasses;j++){
cout<< OrgYMatrix[i][j]<<"\t"<<endl;
}
cout<< "\n";
}



